#!/usr/bin/env python3
"""
Webhook Setup Helper
Interactive setup for Telegram, Discord, or generic webhook configurations.
"""

import json
import os
from typing import Dict, Any

def setup_telegram() -> Dict[str, str]:
    """Setup Telegram webhook configuration."""
    print("\nü§ñ Telegram Bot Setup")
    print("=" * 50)
    print("1. Message @BotFather on Telegram")
    print("2. Send /newbot and follow instructions")
    print("3. Copy the bot token provided")
    print("4. Add your bot to a channel/group or start a private chat")
    print("5. Send a message to your bot")
    print("6. Visit: https://api.telegram.org/bot<YOUR_TOKEN>/getUpdates")
    print("7. Find your chat_id in the JSON response\n")
    
    bot_token = input("Enter your Telegram bot token: ").strip()
    chat_id = input("Enter your chat ID (number): ").strip()
    
    if not bot_token or not chat_id:
        print("‚ùå Both bot token and chat ID are required")
        return {}
    
    return {
        "WEBHOOK_TYPE": "telegram",
        "TELEGRAM_BOT_TOKEN": bot_token,
        "TELEGRAM_CHAT_ID": chat_id
    }

def setup_discord() -> Dict[str, str]:
    """Setup Discord webhook configuration."""
    print("\nüí¨ Discord Webhook Setup")
    print("=" * 50)
    print("1. Go to your Discord server")
    print("2. Right-click on the channel where you want alerts")
    print("3. Select 'Edit Channel'")
    print("4. Go to 'Integrations' tab")
    print("5. Click 'Create Webhook'")
    print("6. Copy the webhook URL\n")
    
    webhook_url = input("Enter your Discord webhook URL: ").strip()
    
    if not webhook_url or not webhook_url.startswith("https://discord.com/api/webhooks/"):
        print("‚ùå Invalid Discord webhook URL")
        return {}
    
    return {
        "WEBHOOK_TYPE": "discord", 
        "DISCORD_WEBHOOK_URL": webhook_url
    }

def setup_generic() -> Dict[str, str]:
    """Setup generic webhook configuration."""
    print("\nüåê Generic Webhook Setup")
    print("=" * 50)
    print("This will send JSON POST requests to your endpoint")
    print("Example payload structure will be shown after setup\n")
    
    webhook_url = input("Enter your webhook URL: ").strip()
    
    if not webhook_url or not webhook_url.startswith("http"):
        print("‚ùå Invalid webhook URL (must start with http/https)")
        return {}
    
    return {
        "WEBHOOK_TYPE": "generic",
        "WEBHOOK_URL": webhook_url
    }

def update_env_file(config: Dict[str, str]):
    """Update .env file with webhook configuration."""
    env_file = ".env"
    
    # Read existing .env content
    existing_config = {}
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and '=' in line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    existing_config[key] = value
    
    # Update with new webhook config
    existing_config.update(config)
    
    # Write updated config
    with open(env_file, 'w') as f:
        f.write("# Pump.fun Alert Bot Configuration\n")
        f.write("# Generated by setup_webhook.py\n\n")
        
        # Required API key
        f.write("# Helius API Key (required)\n")
        f.write(f"HELIUS_API_KEY={existing_config.get('HELIUS_API_KEY', 'your_helius_api_key_here')}\n\n")
        
        # Webhook configuration
        f.write("# Webhook Configuration\n")
        for key, value in config.items():
            f.write(f"{key}={value}\n")
        
        f.write("\n# Optional: Rate limiting\n")
        f.write("RATE_LIMIT_SECONDS=1.0\n")
        
        f.write("\n# Optional: Logging\n")
        f.write("LOG_LEVEL=INFO\n")

def show_example_payload():
    """Show example webhook payload for generic webhooks."""
    example = {
        "alert_type": "pump_fun_token_launch",
        "timestamp": "2025-07-12T23:45:00.123456",
        "token": {
            "name": "DogeCoin2.0",
            "symbol": "DOGE2",
            "mint_address": "7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
            "creator_address": "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
            "bonding_curve": "CebN5uJmj6F7vG2jNjbbCs5DXksJgNpGPq4q9DGoPWd1",
            "associated_bonding_curve": "5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1",
            "metadata_uri": "https://pump.fun/meta/7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU.json",
            "transaction_signature": "5J8YU7v4gW2KgjsXP1uFYEjyG3jKGN4w9L4z8YVyXzLmK3NJxP6Dx9TcRbGFfMsW8xYu7V6kN1mL2FhZq5P4wQ8T",
            "launch_time": "2025-07-12T23:45:00.123456",
            "pump_fun_url": "https://pump.fun/7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
            "solscan_url": "https://solscan.io/tx/5J8YU7v4gW2KgjsXP1uFYEjyG3jKGN4w9L4z8YVyXzLmK3NJxP6Dx9TcRbGFfMsW8xYu7V6kN1mL2FhZq5P4wQ8T"
        },
        "stats": {
            "tokens_detected": 15,
            "webhooks_sent": 14,
            "webhook_failures": 1
        }
    }
    
    print("\nüìã Example Generic Webhook Payload:")
    print("=" * 50)
    print(json.dumps(example, indent=2))

def main():
    """Main setup function."""
    print("üöÄ Pump.fun Webhook Alert Bot Setup")
    print("=" * 50)
    print("Choose your webhook type:")
    print("1. Telegram Bot")
    print("2. Discord Webhook") 
    print("3. Generic Webhook (custom endpoint)")
    
    choice = input("\nEnter your choice (1-3): ").strip()
    
    config = {}
    if choice == "1":
        config = setup_telegram()
    elif choice == "2":
        config = setup_discord()
    elif choice == "3":
        config = setup_generic()
        show_example_payload()
    else:
        print("‚ùå Invalid choice")
        return
    
    if not config:
        print("‚ùå Setup failed")
        return
    
    # Update .env file
    update_env_file(config)
    
    print(f"\n‚úÖ Configuration saved to .env file")
    print(f"üì° Webhook type: {config.get('WEBHOOK_TYPE')}")
    
    print(f"\nüéØ Next steps:")
    print(f"1. Ensure your HELIUS_API_KEY is set in .env")
    print(f"2. Run the bot: python webhook_alert_bot.py")
    print(f"3. Test with: python test_monitor.py")
    
    print(f"\n‚ö° Quick test command:")
    print(f"python webhook_alert_bot.py")

if __name__ == "__main__":
    main()